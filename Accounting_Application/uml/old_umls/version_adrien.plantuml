@startuml
skinparam classAttributeIconSize 0

enum TypeCompte <<enum>> {
  actif
  passif
  recette
  depense
}

abstract class AbstractCompte <<Abstract>> {
  # id : integer
  # nom : string
  # solde : Solde
  # parent : CompteVirtuel*
  __
  .. constructeur ..
  -AbstractCompte()
  .. getters ..
  +getId() : integer
  +getNom() : string
  +getSolde() : double
  +getParent() : CompteVirtuel&
  +getType() : TypeCompte
  .. méthodes ..
  +rapprocher()
}

class Compte <<Concrete>> {
 -operations : vector<Operation *>
 .. constructeur ..
 -Compte()
 .. getters ..
 +getOperation() : Operation *
 +getOperations() : vector<Operation *>
 
}

class CompteVirtuel <<Concrete>> {
  - sousComptes : vector<AbstractCompte *>
  __
  .. constructeur ..
  -CompteVirtuel()
  .. getters ..
  +getSousComptes() : vector<AbstractCompte *>
  +getCompte(string nom) : AbstractCompte&
  +getCompte(integer id) : AbstractCompte&
  +creerCompte() : AbstractCompte&
}

AbstractCompte "*" --o "0..1" CompteVirtuel : contient <
AbstractCompte <|-- Compte
AbstractCompte <|-- CompteVirtuel



abstract class Solde <<Abstract>> {
  #montant : double
  __
  ..getters..
  +getMontant() : double
  ..methode..
  +abstract crediter()
  +abstract debiter()
  +abstract getType()
}
.AbstractCompte *-right- "1" Solde : possède >


abstract class SoldeEmploi <<Abstract>> {
  +crediter(double montant)
  +debiter(double montant)
}

abstract class SoldeRessource <<Abstract>> {
  +crediter(double montant)
  +debiter(double montant)
}

SoldeEmploi -up-|> Solde
SoldeRessource -up-|> Solde

class SoldeActif {
  __
  ..constructeur..
  SoldeActif(float montant)
  ..getters..
  +getType() : TypeCompte
}

class SoldePassif {
  __
  ..constructeur..
  SoldePassif(float montant)
  ..getters..
  +getType() : TypeCompte
}

class SoldeDepense {
  __
  ..constructeur..
  SoldeRecette(float montant)
  ..getters..
  +getType() : TypeCompte
}

class SoldeRecette {
  __
  ..constructeur..
  SoldeRecette(float montant)
  ..getters..
  +getType() : TypeCompte
}

SoldeEmploi <|-- SoldeActif
SoldeEmploi <|-- SoldeDepense
SoldeRessource <|-- SoldeRecette
SoldeRessource <|-- SoldePassif


class Operation {
  -compte : Compte *
  -debit : unsigned double
  -credit : unsigned double
  __
  .. constructeur ..
  -Operation()
  .. getters ..
  +getCompte() : &Compte
  +getDebit() : unsigned double
  +getCredit() : unsigned double
  .. setters ..
  +setDebit()
  +setCredit()
  .. méthodes ..
  +checkValidite() : bool
}

class Transaction {
  -date : date
  -reference : integer
  -memo : string
  -operations : vector<Operation *>
  -rapprochee : bool
  __
  .. constructeur ..
  -Transaction()
  .. getters ..
  +getDate() :
  +getReference() : integer
  +getMemo() : string
  +getOperations() : vector<Operation *>
  +isRaprochee() : bool
  .. méthodes ..
  +checkValidite() : bool
}

Transaction *-- "2..*" Operation
Compte *-- "*" Operation

class TransactionManager << (S,#FF7700) Singleton >> {
  - static instance : TransactionManager *
  - filename : string
  - transactions : vector<vector<Operation *>>
  __
  .. constructeur ..
  -TransactionManager()
  .. getters ..
  +static getInstance() : &TransactionManager
  .. méthodes ..
  +creerTransaction() : &Transaction
  +setFilename()
}

TransactionManager ..> Transaction : crée

class RapprochementCareTaker {
  .. méthodes ..
  +rapprocherCompte()
}

class RapprochementMemento << (M,#FF7700) Memento>> {
  -solde : double
  -date : date
  __
  .. constructeur ..
  +RapprochementMemento()
  .. getters ..
  +getSolde()
  +getDate()
}

AbstractCompte "*" -- "1" RapprochementCareTaker
AbstractCompte "1" -- "1" RapprochementMemento : crée >

interface Application << Facade >> {
  -compteRacine : CompteVirtuel*
  -compteFilename
  __
  +genererBilan()
  +genererReleve()
  +genererResultat()
  +clotureLivre()
}
note right
    la facade pointe sur un compteVirtuel qui représente le compte racine
    on n'a plus besoin de classe CompteRacine car ses fonctionnalités
    sont prises en charge par la facade ou par le compteVirtuel racine
end note

Application -- AbstractCompte
Application -- TransactionManager

@enduml
